WHITE = 1
BLACK = 2


def opponent(color):
    if color == WHITE:
        return BLACK
    else:
        return WHITE


def correct_coords(row, col):
    return 0 <= row < 8 and 0 <= col < 8


def check_move(board, row, col, row1, col1, color):
    if not correct_coords(row1, col1):
        return False
    if row == row1 and col == col1:
        return False
    piece1 = board.get_piece(row1, col1)
    if not (piece1 is None) and piece1.get_color() == color:
        return False
    return True


class Figure:
    def __init__(self, color, name):
        self.color = color
        self.name = name
        self.w = 'w' if color == WHITE else 'b'

    def get_color(self):
        return self.color

    def char(self):
        return self.name[0] if self.name != 'Knight' else "N"

    def can_attack(self, board, row, col, row1, col1):
        return self.can_move(board, row, col, row1, col1)

    def can_move(self, board, row, col, row1, col1):
        pass

    def __repr__(self):
        return self.w + self.char()


class Rook(Figure):

    def __init__(self, color):
        super().__init__(color, 'Rook')
        self.count_move = 0

    def can_move(self, board, row, col, row1, col1):
        if row != row1 and col != col1:
            return False

        step = 1 if (row1 >= row) else -1
        for r in range(row + step, row1, step):
            if not (board.get_piece(r, col) is None):
                return False

        step = 1 if (col1 >= col) else -1
        for c in range(col + step, col1, step):
            if not (board.get_piece(row, c) is None):
                return False
        return True


class Pawn(Figure):

    def __init__(self, color):
        super().__init__(color, 'Pawn')

    def can_move(self, board, row, col, row1, col1):
        if col != col1:
            return False

        if self.color == WHITE:
            direction = 1
            start_row = 1
        else:
            direction = -1
            start_row = 6

        if row + direction == row1:
            return True

        if (row == start_row
                and row + 2 * direction == row1
                and board.field[row + direction][col] is None):
            return True

        return False

    def can_attack(self, board, row, col, row1, col1):
        direction = 1 if (self.color == WHITE) else -1
        return (row + direction == row1
                and (col + 1 == col1 or col - 1 == col1))


class Knight(Figure):
    def __init__(self, color):
        super().__init__(color, 'Knight')

    def can_move(self, board, row, col, row1, col1):
        if 0 <= row < 8 and 0 <= col < 8:
            if abs(row - row1) * abs(col - col1) == 2:
                return True
        return False


class King(Figure):
    def __init__(self, color):
        super().__init__(color, 'King')

    def can_move(self, board, row, col, row1, col1):
        if abs(row - row1) <= 1 and abs(col - col1) <= 1:
            return True


class Queen(Figure):
    def __init__(self, color):
        super().__init__(color, 'Queen')

    def can_move(self, board, row, col, row1, col1):
        if not check_move(board, row, col, row1, col1, self.color):
            return False
        if row == row1 or col == col1:
            step = 1 if (row1 >= row) else -1
            for r in range(row + step, row1, step):
                if not (board.get_piece(r, col) is None):
                    return False
            step = 1 if (col1 >= col) else -1
            for c in range(col + step, col1, step):
                if not (board.get_piece(row, c) is None):
                    return False
            return True
        if row - col == row1 - col1:
            step = 1 if (row1 >= row) else -1
            for r in range(row + step, row1, step):
                c = col - row + r
                if not (board.get_piece(r, c) is None):
                    return False
            return True
        if row + col == row1 + col1:
            step = 1 if (row1 >= row) else -1
            for r in range(row + step, row1, step):
                c = row + col - r
                if not (board.get_piece(r, c) is None):
                    return False
            return True
        return False


class Bishop(Figure):
    def __init__(self, color):
        super().__init__(color, 'Bishop')

    def can_move(self, board, row, col, row1, col1):
        if 0 <= row < 8 and 0 <= col < 8:
            if abs(row - row1) == abs(col - col1):
                return True
            return False


class Board:
    def __init__(self):
        self.color = WHITE
        self.field = []
        for row in range(8):
            self.field.append([None] * 8)
        self.field[0] = [
            Rook(WHITE), Knight(WHITE), Bishop(WHITE), Queen(WHITE),
            King(WHITE), Bishop(WHITE), Knight(WHITE), Rook(WHITE)
        ]
        self.field[1] = [
            Pawn(WHITE), Pawn(WHITE), Pawn(WHITE), Pawn(WHITE),
            Pawn(WHITE), Pawn(WHITE), Pawn(WHITE), Pawn(WHITE)
        ]
        self.field[6] = [
            Pawn(BLACK), Pawn(BLACK), Pawn(BLACK), Pawn(BLACK),
            Pawn(BLACK), Pawn(BLACK), Pawn(BLACK), Pawn(BLACK)
        ]
        self.field[7] = [
            Rook(BLACK), Knight(BLACK), Bishop(BLACK), Queen(BLACK),
            King(BLACK), Bishop(BLACK), Knight(BLACK), Rook(BLACK)
        ]

    def current_player_color(self):
        return self.color

    def cell(self, row, col):
        piece = self.field[row][col]
        if piece is None:
            return '  '
        color = piece.get_color()
        c = 'w' if color == WHITE else 'b'
        return c + piece.char()

    def get_piece(self, row, col):
        if correct_coords(row, col):
            return self.field[row][col]
        else:
            return None

    def move_piece(self, row, col, row1, col1):
        if not correct_coords(row, col) or not correct_coords(row1, col1):
            return False
        if row == row1 and col == col1:
            return False
        piece = self.field[row][col]
        if piece is None:
            return False
        if piece.get_color() != self.color:
            return False
        if self.field[row1][col1] is None:
            if not piece.can_move(self, row, col, row1, col1):
                return False
        elif self.field[row1][col1].get_color() == opponent(piece.get_color()):
            if not piece.can_attack(self, row, col, row1, col1):
                return False
        else:
            return False

        self.field[row][col] = None
        self.field[row1][col1] = piece
        self.color = opponent(self.color)
        return True

    def __repr__(self):
        s = ''
        for row in range(7, -1, -1):
            s += f'     +----+----+----+----+----+----+----+----+\n  {str(list(range(8))[row])}  '
            for col in range(8):
                s += f'| {self.field[row][col] if self.field[row][col] else "  "} '
            s += f"|\n"
        s += f'     +----+----+----+----+----+----+----+----+\n        {"    ".join(str(i) for i in range(8))}  '
        return s


